

nginx详细的安装过程如下：

==== 建立nginx的运行用户和组 ====
```
/usr/sbin/groupadd www -g 48
/usr/sbin/useradd -u 48 -g www www 
```
如果系统已经存在apache用户，那么可以跳过这一步，直接用apache用户来跑nginx也是不错的注意，要注意将下面配置文件和命令中的www替换为apache就行了。

==== 建立web文件保存目录 ====
```
mkdir -pv /data/htdocs
chmod +w /data/htdocs
chown -R www:www /data/htdocs 
```
为了提高磁盘I/O性能data目录最好在一个独立的分区中，这样比数据和程序混在一个分区的寻址时间稍微短一些。

==== 建立nginx的log文件保存目录 ====
```
mkdir -pv /var/log/nginx
chmod +w /var/log/nginx
chown -R www:www /var/log/nginx 
```
log的放置目录我们遵循POSIX规范，为了提高磁盘I/O，等调试完毕进入运行状态后可以将nginx的access log关闭掉。

==== 编译安装PCRE ====
下载地址：http://downloads.sourceforge.net/pcre/pcre-7.6.tar.bz2
```
tar zxvf pcre-7.6.tar.gz
cd pcre-7.6/
./configure
make && make install 
```
PCRE是Perl Compatible Regular Expression（perl正则表达式兼容库）的缩写，nginx的rewrite功能需要用到正则表达式，所以要安装。

==== 编译安装nginx ====
下载：http://sysoev.ru/nginx/nginx-0.7.60.tar.gz
```
wget http://sysoev.ru/nginx/nginx-0.7.60.tar.gz
tar zxf nginx-0.7.60.tar.gz
cd nginx-0.7.60/
./configure --user=www --group=www --prefix=/srv/nginx --with-http_stub_status_module
make && make install 
```
编译指令中指定了nginx的运行用户和组，还附带上一个查看在线人数状态的模块。
由于nginx的设计目标是轻量级的http服务器，所以不会设计类似apache那套复杂的动态装载动态库的系统，所以如果需要什么模块必须在编译的时候就指定好，nginx编译完后只会在sbin/nginx一个二进制文件。

==== 配置nginx ====
```
rm -f /srv/nginx/conf/nginx.conf
vi /srv/nginx/conf/nginx.conf
```
nginx.conf的内容如下
```
#bascic setting
user   www www;
worker_processes 6;
worker_rlimit_nofile 51200;
#error file position and log level[ debug | info | notice | warn | error | crit ]
error_log  /data/logs/nginx/error.log  crit;
#
events 
{
 use   epoll;
 worker_connections 51200;
}
#
http 
{
 include    mime.types;
 default_type   application/octet-stream;
 server_names_hash_bucket_size 128;
 client_max_body_size  16m;
 #ShopEx Cookie compatible
 client_header_buffer_size 128k;
 large_client_header_buffers 4 64k;
 #open send file to NIC directly
 sendfile   on;
 tcp_nopush   on;
 tcp_nodelay   on;
 #process life time(s)
 keepalive_timeout  90;
 #fastcgi expire time control
 fastcgi_connect_timeout 60;
 fastcgi_send_timeout 180;
 fastcgi_read_timeout 180;
 fastcgi_buffer_size 128k;
 fastcgi_buffers 4 128k;
 fastcgi_busy_buffers_size 128k;
 fastcgi_temp_file_write_size 128k;
 fastcgi_temp_path /dev/shm;
 #zip compress setting
 gzip    on;
 gzip_min_length   1k;
 gzip_buffers   4 8k;
 gzip_http_version  1.1;
 gzip_types   text/plain application/x-javascript text/css  application/xml;
 gzip_disable "MSIE [1-6]\."; #log format
 log_format  access '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
     '"$http_user_agent" $http_x_forwarded_for';
 #host setting
 server
 {
  listen 80;
  server_name foobar.com www.foobar.com;
  index index.html index.htm index.php;
  root /data/htdocs;
  #ShopEx 4.8 rewrite rule
  if (!-e $request_filename) 
  {
   rewrite ^/(.*)$ /index.php?$1;
  }
  #PHP FastCGI link configure
  location ~ .*\.php?$
  {
   include  php_fcgi.conf;      
   fastcgi_pass 127.0.0.1:9000;
   fastcgi_index index.php;
  }
  #access_log setting,replace access; to off; turn off log operation.
  access_log  /var/log/nginx/access.log  access;
 }
}
```
参数设置说明：

+ user  指定运行用户要和编译时设定的一致
+ worker_processes  设置工作者进程数，一般6个就够了
+ client_max_body_size  允许上传文件大小，至少是2m，否则上传不了模板 
+ keepalive_timeout 90秒的生存周期，低负载，高并发时可以设低一点 
+ server_name  多个站点时，根据域名绑定站点用
+ access_log  试完毕后最好关掉，一般access log没有用，除非做访问统计 


如果需要再开一个站点，只要拷贝一份server {}段的内容，改掉server_name的值就行了。


下面设置nginx和PHP FastCGI的连接方式
```
vi /srv/nginx/conf/php_fcgi.conf
```
php_fcgi.conf的内容如下：
```
fastcgi_param  GATEWAY_INTERFACE  CGI/1.1;
fastcgi_param  SERVER_SOFTWARE    nginx;
#
fastcgi_param  QUERY_STRING       $query_string;
fastcgi_param  REQUEST_METHOD     $request_method;
fastcgi_param  CONTENT_TYPE       $content_type;
fastcgi_param  CONTENT_LENGTH     $content_length;
# 
fastcgi_param  SCRIPT_FILENAME    $document_root$fastcgi_script_name;
fastcgi_param  SCRIPT_NAME        $fastcgi_script_name;
fastcgi_param  REQUEST_URI        $request_uri;
fastcgi_param  DOCUMENT_URI       $document_uri;
fastcgi_param  DOCUMENT_ROOT      $document_root;
fastcgi_param  SERVER_PROTOCOL    $server_protocol;
# 
fastcgi_param  REMOTE_ADDR        $remote_addr;
fastcgi_param  REMOTE_PORT        $remote_port;
fastcgi_param  SERVER_ADDR        $server_addr;
fastcgi_param  SERVER_PORT        $server_port;
fastcgi_param  SERVER_NAME        $server_name;
 
# PHP only, required if PHP was built with --enable-force-cgi-redirect
fastcgi_param  REDIRECT_STATUS    200;
```
照搬就行了

==== 启动脚本 ====
我们建立一个bash脚本，方便我们对nginx进行控制
```
vi /sbin/nginxctl
```
nginxctl的内容如下：
```
#!/bin/sh
# description: Startup and shutdown script for nginx
NGINX_DIR=/srv/nginx
export NGINX_DIR
case $1 in
'start' )
 echo "Starting nginx..."
 ulimit -SHn 51200
 $NGINX_DIR/sbin/nginx
;;
'reload' )
 echo "Reload nginx configuration..."
 kill -HUP `cat $NGINX_DIR/logs/nginx.pid`
;;
'stop' )
 echo "Stopping nginx..."
 kill -15 `cat $NGINX_DIR/logs/nginx.pid`
;;
'list' )
 ps aux | egrep '(PID|nginx)'
;;
'testconfig' )
 $NGINX_DIR/sbin/nginx -t
;;
*)
 echo "usage: `basename $0` {start|reload|stop|list|testconfig}"
esac 
```

给这个脚本执行权限

```
 chmod +x /sbin/nginxctl
```

使用方法：

- 启动nginx
``` nginxctl start
- 停止nginx
``` nginxctl stop
- 重启nginx
``` nginxctl reload
- 测试nginx配置文件
``` nginxctl testconfig


